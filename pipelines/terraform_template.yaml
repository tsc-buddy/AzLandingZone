# File: terraform_template.yml
parameters:
- name: 'jobs'
  type: jobList
  default: []

jobs:
- ${{ each job in parameters.jobs }}: # Each job
  - ${{ each pair in job }}:          # Insert all properties other than "steps"
      ${{ if not(in(pair.key, 'steps')) }}:
        ${{ pair.key }}: ${{ pair.value }}
    pool:
      vmImage: 'ubuntu-latest'
    steps:                            # Wrap the steps
    - ${{ each pair in job.variables }}:
      - ${{ if in(pair.name, 'directory') }}:
        - bash: |
            echo "##vso[task.setvariable variable=${{ pair.name }}]${{ pair.value }}"
    - task: replacetokens@3
      inputs:
        targetFiles: '**/*.tfvars'
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        useLegacyPattern: false
        enableTelemetry: true
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.13.5'
    - ${{ each pair in job.variables }}:
      - ${{ if in(pair.name, 'serviceConnection') }}:
        - bash: |
            echo "##vso[task.setvariable variable=${{ pair.name }}]${{ pair.value }}"
        - task: TerraformTaskV1@0
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(directory)
            backendServiceArm: ${{ pair.value }}
            backendAzureRmResourceGroupName: 'rg-terraformstate-ae'
            backendAzureRmStorageAccountName: 'lzstatetf'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: ${{ job.job }}.tfstate
        - task: TerraformTaskV1@0
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: $(directory)
            environmentServiceNameAzureRM: ${{ pair.value }}
        - task: TerraformTaskV1@0
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: $(directory)
            environmentServiceNameAzureRM: ${{ pair.value }}
#        - task: TerraformTaskV1@0
#          inputs:
#            provider: 'azurerm'
#            command: 'destroy'
#            workingDirectory: $(directory)
#            environmentServiceNameAzureRM: ${{ pair.value }}